
four-diving_wheel_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007eb  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  00001042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fe  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		Delay(1);
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 50 00 	call	0xa0	; 0xa0 <Delay>
		Delay(1);
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 50 00 	call	0xa0	; 0xa0 <Delay>
		Delay(1);
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0e 94 50 00 	call	0xa0	; 0xa0 <Delay>
  84:	f3 cf       	rjmp	.-26     	; 0x6c <main>

00000086 <TIMER_init>:
		*value = 0x01;
	}
	else if ((TIFR & clear) == 1)
	{
		*value = 0x00;
		TIFR |= clear;
  86:	93 b7       	in	r25, 0x33	; 51
  88:	89 23       	and	r24, r25
  8a:	83 bf       	out	0x33, r24	; 51
  8c:	62 bf       	out	0x32, r22	; 50
  8e:	08 95       	ret

00000090 <TIMER_start>:
  90:	93 b7       	in	r25, 0x33	; 51
  92:	89 2b       	or	r24, r25
  94:	83 bf       	out	0x33, r24	; 51
  96:	08 95       	ret

00000098 <TIMER_set>:
  98:	82 bf       	out	0x32, r24	; 50
  9a:	08 95       	ret

0000009c <TIMER_Stop>:
	}
}
	void TIMER_Stop (void){
		//Timer Stop
		TCCR0 = no_clk;	
  9c:	13 be       	out	0x33, r1	; 51
  9e:	08 95       	ret

000000a0 <Delay>:
	}
void Delay(uint32_t seconds)
{
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	8c 01       	movw	r16, r24
	TIMER_init (normal,Intial_value);
  aa:	65 e2       	ldi	r22, 0x25	; 37
  ac:	87 eb       	ldi	r24, 0xB7	; 183
  ae:	0e 94 43 00 	call	0x86	; 0x86 <TIMER_init>
	TIMER_start (pres_1);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 48 00 	call	0x90	; 0x90 <TIMER_start>
	uint32_t i;
	uint8_t counter;
	if (seconds>0)
  b8:	01 15       	cp	r16, r1
  ba:	11 05       	cpc	r17, r1
  bc:	b9 f4       	brne	.+46     	; 0xec <Delay+0x4c>
  be:	1b c0       	rjmp	.+54     	; 0xf6 <Delay+0x56>
	// n = ((1000us)-(3numovflow)*(256us))/(1us)  // = 66 ticks
	//for one millisecond delay iterate 3 times of timer overflow and 232 ticks
	counter = 0;
	while(counter<3){
		
		while((TIFR & clear) == 0);
  c0:	08 b6       	in	r0, 0x38	; 56
  c2:	00 fe       	sbrs	r0, 0
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <Delay+0x20>
		TIFR |= clear;
  c6:	88 b7       	in	r24, 0x38	; 56
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	88 bf       	out	0x38, r24	; 56
		counter++;
  cc:	9f 5f       	subi	r25, 0xFF	; 255
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <Delay+0x32>
  d0:	90 e0       	ldi	r25, 0x00	; 0
	
	// N = (1000us)/(256u);  //=3.9 by approx. it will 3
	// n = ((1000us)-(3numovflow)*(256us))/(1us)  // = 66 ticks
	//for one millisecond delay iterate 3 times of timer overflow and 232 ticks
	counter = 0;
	while(counter<3){
  d2:	93 30       	cpi	r25, 0x03	; 3
  d4:	a8 f3       	brcs	.-22     	; 0xc0 <Delay+0x20>
		while((TIFR & clear) == 0);
		TIFR |= clear;
		counter++;
	}
	// instructions time between setting ticks and timer starting count from last overflow is 16us
	TIMER_set(ticks_214);  // 232ticks - 18us =214ticks, so substitute by 214ticks instead of 232ticks
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	0e 94 4c 00 	call	0x98	; 0x98 <TIMER_set>
	while ((TIFR & clear) == 0);
  dc:	08 b6       	in	r0, 0x38	; 56
  de:	00 fe       	sbrs	r0, 0
  e0:	fd cf       	rjmp	.-6      	; 0xdc <Delay+0x3c>
	TIFR |= clear;
  e2:	88 b7       	in	r24, 0x38	; 56
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	88 bf       	out	0x38, r24	; 56
	uint32_t i;
	uint8_t counter;
	if (seconds>0)
	{
	
	for(i=0;i< seconds ;i++){
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Delay+0x50>
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	c0 17       	cp	r28, r16
  f2:	d1 07       	cpc	r29, r17
  f4:	68 f3       	brcs	.-38     	; 0xd0 <Delay+0x30>
	while ((TIFR & clear) == 0);
	TIFR |= clear;
	
	}
	}
TIMER_Stop ();
  f6:	0e 94 4e 00 	call	0x9c	; 0x9c <TIMER_Stop>
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
